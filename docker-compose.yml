version: '3.9'

services:
  # MongoDB Database
  mongodb:
    image: mongo:8.0
    container_name: robotic-dashboard-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-roboticDashboard123}
      MONGO_INITDB_DATABASE: robotic-dashboard
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - robotic-dashboard-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Pub/Sub (optional, for scaling)
  redis:
    image: redis:7.0-alpine
    container_name: robotic-dashboard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - robotic-dashboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend WebSocket Server
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: robotic-dashboard-backend
    restart: unless-stopped
    ports:
      - "9001:9001"
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-roboticDashboard123}@mongodb:27017/robotic-dashboard?authSource=admin
      REDIS_URL: redis://redis:6379
      WS_PORT: 9001
      WORKERS: ${WORKERS:-4}
      USE_REDIS_PUBSUB: "true"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - robotic-dashboard-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run cluster

  # Robot Simulator (for testing)
  # simulator:
  #   build:
  #     context: ./src/backend
  #     dockerfile: Dockerfile
  #   container_name: robot-fleet-simulator
  #   restart: unless-stopped
  #   environment:
  #     WS_URL: ws://backend:9001/robot
  #     NUM_ROBOTS: ${NUM_ROBOTS:-10}
  #     UPDATE_INTERVAL: ${UPDATE_INTERVAL:-5000}
  #   depends_on:
  #     - backend
  #   networks:
  #     - robotic-dashboard-network
  #   volumes:
  #     - ./src/backend/simulator:/app

  # Frontend Next.js Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: robotic-dashboard-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: http://localhost:8080
    depends_on:
      - backend
    networks:
      - robotic-dashboard-network
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx Load Balancer (optional, for multiple backend instances)
  # nginx:
  #   image: nginx:alpine
  #   container_name: robotic-dashboard-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - robotic-dashboard-network

  # # Monitoring with Prometheus (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: robot-fleet-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   networks:
  #     - robotic-dashboard-network

  # # Grafana for visualization (optional)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: robot-fleet-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
  #     - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - robotic-dashboard-network

networks:
  robotic-dashboard-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  # prometheus_data:
  # grafana_data: