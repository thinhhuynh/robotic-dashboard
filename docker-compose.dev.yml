version: '3.9'

services:
  # MongoDB Database
  mongodb:
    image: mongo:8.0
    container_name: robotic-dashboard-mongodb-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-roboticDashboard123}
      MONGO_INITDB_DATABASE: robotic-dashboard
    volumes:
      - mongodb_dev_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - robotic-dashboard-dev-network
    healthcheck:
      test: |
        echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet || exit 1
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis for Pub/Sub
  redis:
    image: redis:7.0-alpine
    container_name: robotic-dashboard-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - robotic-dashboard-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Backend WebSocket Server (Development Mode)
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: robotic-dashboard-backend-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9229:9229"  # Debug port
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-roboticDashboard123}@mongodb:27017/robotic-dashboard?authSource=admin
      REDIS_URL: redis://redis:6379
      PORT: 8080
      SEED_ON_START: "true"
      # Enable debug mode
      DEBUG: "*"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - robotic-dashboard-dev-network
    volumes:
      # Hot reload for backend development
      - ./src/backend:/app
      - /app/node_modules
      - /app/dist
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: npm run start:dev

  # Frontend Next.js Application (Development Mode)
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: robotic-dashboard-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: http://localhost:8080
      NEXT_PUBLIC_WS_DASHBOARD_URL: http://localhost:8080/dashboard
      NEXT_PUBLIC_WS_ROBOT_URL: http://localhost:8080
      # Enable hot reload
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      FAST_REFRESH: "true"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - robotic-dashboard-dev-network
    volumes:
      # Hot reload for frontend development
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    command: npm run dev
    labels:
      - "com.docker.compose.depends_on=backend:healthy"

  # Auto-reload Service
  auto-reload:
    image: alpine:latest
    container_name: robotic-dashboard-auto-reload
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./auto-reload.sh:/auto-reload.sh:ro
    depends_on:
      - backend
      - frontend
    networks:
      - robotic-dashboard-dev-network
    command: |
      sh -c "
        apk add --no-cache docker-cli &&
        chmod +x /auto-reload.sh &&
        /auto-reload.sh monitor
      "

networks:
  robotic-dashboard-dev-network:
    driver: bridge

volumes:
  mongodb_dev_data:
  redis_dev_data: